#include <iostream>
#include <iomanip>

using namespace std;

// 打印数列
void printArr(int *arr, int len) {
    for (int i = 0; i < len; ++i) {
        cout << setw(4) << arr[i];
    }
    cout << endl << endl;
}

// 双调排序
void bitonicSort(int *arr, int len, bool asd) { // asd 升序
    int step = len / 2; // len = 2^k
    for (; step > 0; step /= 2) { // 自顶向下排序
        // 内部两层 for 共 len/2 次的交换，可以并行执行
        for (int i = 0; i < len; i += 2 * step) { // 2 * step 双调子序列的长度
            for (int j = i; j < i + step; ++j) { // 遍历序列内部，i是序列起点
                if (asd) {
                    if (arr[j] > arr[j + step]) swap(arr[j], arr[j + step]);
                } else {
                    if (arr[j] < arr[j + step]) swap(arr[j], arr[j + step]);
                }
            }
        }
    }
}


int main() {
    int len = 16;
    auto *arr = new int[len]; // 自动识别类型
    bool asd = true; // 默认升序

    // 1.随机生成无序序列
    srandom((unsigned int) time(nullptr));

    for (int i = 0; i < len; ++i) {
        arr[i] = (int) random() % 100; // 随机生成100内的正整数
    }

    cout << "无序序列: ";
    printArr(arr, len);

    // 2.将无序的输入序列转换成双调序列 自底向上 2增序，4增序，8增序
    for (int step = 2; step < len; step *= 2) {
        for (int i = 0; i < len; i += 2 * step) {       // 2 * step 双调子序列的长度
            bitonicSort(arr + i, step, asd);            // 前半段
            bitonicSort(arr + step + i, step, !asd);    // 后半段
        }
    }

    cout << "双调序列: ";
    printArr(arr, len); // 双调序列

    // 3.双调序列合并成为有序序列
    bitonicSort(arr, len, asd);

    cout << "有序序列: ";
    printArr(arr, len); // 有序序列

}