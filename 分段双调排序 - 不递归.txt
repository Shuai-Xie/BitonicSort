#include <iostream>
#include <iomanip>
#include <cmath>
#include <sys/time.h>

#define NaN (float)sqrt(-1.0)

using namespace std;

void printArr(float *arr, int len) {
    for (int i = 0; i < len; ++i) {
        if (arr[i] == NaN) cout << setw(5) << "NaN";
        else cout << setw(5) << arr[i];
    }
    cout << endl;
}

// 获得毫秒级时间
long getCurrentTime() {
    struct timeval tv;
    gettimeofday(&tv, nullptr);
    return tv.tv_sec * 1000 + tv.tv_usec / 1000;
}

/**
 * 不递归任意双调排序 思路参考归并排序 自底向上 两段归一
 * @param arr 数列
 * @param len 数列长度
 */
void bitonicSort(float *arr, int len) {

    // 外部归并参数
    int left_min, left_max, right_min, right_max;

    int k = 1;
    while (k < len) k = k << 1;
    int step_max = k >> 1;

    for (int step = 1; step < len; step *= 2) {

        // 升降序标志
        bool asd = (step == step_max); // 相等，全局升序，否则，前半降序后半升序

        for (left_min = 0; left_min < len; left_min = right_max) {

            left_max = left_min + step;     // 左边终止位置
            right_min = left_max;           // 右边起始位置
            right_max = right_min + step;   // 右边终止位置 也是for中下一段的开始

            if (right_max > len) right_max = len;   // 处理数列长度 !=2^n 的情况

            // 完成 [left_min, left_max] [right_min, right_max] 这两段的双调排序

            // 1. 外层排序
            // 保证段中所有元素满足 [left_min, left_max] < [right_min, right_max]
            int begin = left_min; // 记住父序列初始的位置
            while (left_min < left_max && right_min < right_max) {

                while (arr[left_min] == NaN && left_min < left_max) left_min++;
                while (arr[right_min] == NaN && right_min < right_max) right_min++;

                if (left_min >= left_max || right_min >= right_max) break;

                if (arr[left_min] > arr[right_min] == asd) {
                    // swap(arr[left_min], arr[right_min]); 交换二值
//                    arr[left_min] = arr[left_min] ^ arr[right_min];
//                    arr[right_min] = arr[left_min] ^ arr[right_min];
//                    arr[left_min] = arr[left_min] ^ arr[right_min];
                    float tmp = arr[left_min];
                    arr[left_min] = arr[right_min];
                    arr[right_min] = tmp;
                }
                left_min++;
                right_min++;
            }

            // 2. 内层排序
            // 自上而下调整 [left_min, right_max] 整段序列为单调序列
            int c_step = step;
            while (c_step > 1) {
                c_step /= 2; // 内部首先step减半

                // 内部归并参数
                int c_left_min, c_left_max, c_right_min, c_right_max;

                // begin      父序列开始的位置
                // right_max  父序列终止的位置
                for (c_left_min = begin; c_left_min < right_max; c_left_min = c_right_max) {

                    c_left_max = c_left_min + c_step;
                    c_right_min = c_left_max;
                    c_right_max = c_right_min + c_step;

                    if (c_right_max > right_max) c_right_max = right_max;

                    while (c_left_min < c_left_max && c_right_min < c_right_max) {

                        while (arr[c_left_min] == NaN && c_left_min < c_left_max) c_left_min++;
                        while (arr[c_right_min] == NaN && c_right_min < c_right_max) c_right_min++;

                        if (c_left_min >= c_left_max || c_right_min >= c_right_max) break;

                        if (arr[c_left_min] > arr[c_right_min] == asd) {
                            // swap(arr[c_left_min], arr[c_right_min]); 交换二值
//                            arr[c_left_min] = arr[c_left_min] ^ arr[c_right_min];
//                            arr[c_right_min] = arr[c_left_min] ^ arr[c_right_min];
//                            arr[c_left_min] = arr[c_left_min] ^ arr[c_right_min];
                            float tmp = arr[c_left_min];
                            arr[c_left_min] = arr[c_right_min];
                            arr[c_right_min] = tmp;
                        }
                        c_left_min++;
                        c_right_min++;
                    }
                }
            }

            // 打印子序列
//            cout << "外层步长: " << step << ", ";
//            printArr(arr + begin, right_max - begin);

            // 改变排序规则 因为要求双调 单调性交替变化
            asd = !asd;
        }

//        cout << endl << endl;
    }

}


/**
 * 分段双调排序
 * @param data 原始数据
 * @param seg_id data 中 n 个元素各自所在的段编号
 * @param seg_start 共有 m+1 个元素，前 m 个分别给出 0..m-1 共 m 个段的起始位置，seg_start[m] = n
 * @param n data 中包含 n 个数据
 * @param m data 分为 m 段数据
 */
void segmentedBitonicSort(float *data, int *seg_id, int *seg_start, int n, int m) {
    for (int i = 0; i < m; ++i) {
        float *arr = data + seg_start[i];
        int len = seg_start[i + 1] - seg_start[i];
        cout << "排序前 段 " << i << ": ";
        printArr(arr, len);
        bitonicSort(arr, len);
        cout << "排序后 段 " << i << ": ";
        printArr(arr, len);
    }
}

int main() {

//    float data[8] = {0.8, 0.2, 0.4, 0.6, 0.5, 0.2, 0.1, 0.01}; // 数列
//    int seg_id[8] = {0, 0, 1, 1, 1, 2, 2, 2}; // id
//    int seg_start[4] = {0, 2, 5, 8}; // 段首位置
//    int n = 8; // 数据长度
//    int m = 3; // 数据段数

    float data[11] = {0.8, 0.2, 0.4, NaN, 0.6, 0.5, NaN, 0.2, 0.1, NaN, 0.01}; // 数列
    int seg_id[11] = {0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2}; // id
    int seg_start[4] = {0, 2, 6, 11}; // 段首位置
    int n = 11; // 数据长度
    int m = 3; // 数据段数

    long beginTime = getCurrentTime();
    cout << "开始时间：" << beginTime << endl;

    segmentedBitonicSort(data, seg_id, seg_start, n, m);

    long endTime = getCurrentTime();
    cout << "结束时间：" << endTime << endl;

    cout << "时间差：" << endTime - beginTime << endl << endl;

}