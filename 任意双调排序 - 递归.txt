/*
 * 升序逻辑，末尾补1
 */
#include <iostream>
#include <iomanip>

using namespace std;

// 打印数列
void printArr(int *arr, int len) {
    for (int i = 0; i < len; ++i) {
        cout << setw(4) << arr[i];
    }
    cout << endl << endl;
}

// if len = 6, then return 4
int getGreatest2nLessThan(int len) {
    int k = 1;
    while (k < len) k = k << 1; // 注意一定要加k=
    return k >> 1;
}

// 任意双调排序归并
void bitonicMergeAnyN(int *arr, int len, bool asd) {
    if (len > 1) {
        int m = getGreatest2nLessThan(len);
        for (int i = 0; i < len - m; ++i) {
            if (arr[i] > arr[i + m] == asd) // asd = true 升序，asd = false 降序
                swap(arr[i], arr[i + m]);
        }
        // 左端所有元素都小于右段 两段都升序
        bitonicMergeAnyN(arr, m, asd); // 一般情况下，m > len-m
        bitonicMergeAnyN(arr + m, len - m, asd);
    }
}

// 双调排序
void bitonicSort(int *arr, int len, bool asd) { // asd 升序
    if (len > 1) {
        int m = len / 2;
        bitonicSort(arr, m, !asd); // 前半降序
        bitonicSort(arr + m, len - m, asd); // 后半升序，因为01原理，后面补1，不改变双调性
        bitonicMergeAnyN(arr, len, asd);
    }
}


int main() {
    int len = 11;
    auto *arr = new int[len]; // 自动识别类型
    bool asd = true; // 默认升序，改为false，降序排列

    // 1.随机生成无序序列
    srandom((unsigned int) time(nullptr));

    for (int i = 0; i < len; ++i)
        arr[i] = (int) random() % 100; // 随机生成100内的正整数

    cout << "无序序列: ";
    printArr(arr, len);

    bitonicSort(arr, len, asd);

    cout << "有序序列: ";
    printArr(arr, len); // 有序序列

}

################################################################################################

/*
 * 降序逻辑，末尾补0
 */
#include <iostream>
#include <iomanip>

using namespace std;

// 打印数列
void printArr(int *arr, int len) {
    for (int i = 0; i < len; ++i) {
        cout << setw(4) << arr[i];
    }
    cout << endl << endl;
}

// if len = 6, then return 4
int getGreatest2nLessThan(int len) {
    int k = 1;
    while (k < len) k = k << 1; // 注意一定要加k=
    return k >> 1;
}

// 任意双调排序归并
void bitonicMergeAnyN(int *arr, int len, bool dsc) {
    if (len > 1) {
        int m = getGreatest2nLessThan(len);
        for (int i = 0; i < len - m; ++i) {
            if (arr[i] < arr[i + m] == dsc)
                swap(arr[i], arr[i + m]); // 根据asd判断是否交换
        }
        // 左端所有元素都大于右段 两段都降序
        bitonicMergeAnyN(arr, m, dsc); // 一般情况下，m > len-m
        bitonicMergeAnyN(arr + m, len - m, dsc);
    }
}

// 双调排序
void bitonicSort(int *arr, int len, bool dsc) { // asd 升序
    if (len > 1) {
        int m = len / 2;
        bitonicSort(arr, m, !dsc);             // 前半升序
        bitonicSort(arr + m, len - m, dsc);    // 后半降序，因为01原理，后面补0，不改变双调性
        bitonicMergeAnyN(arr, len, dsc);       // 全局降序
    }
}


int main() {
    int len = 11;
    auto *arr = new int[len];
    bool dsc = true; // 默认降序，改为false，升序排列

    srandom((unsigned int) time(nullptr));

    for (int i = 0; i < len; ++i) arr[i] = (int) random() % 100; // 随机生成100内的正整数

    cout << "无序序列: ";
    printArr(arr, len);

    bitonicSort(arr, len, dsc);

    cout << "有序序列: ";
    printArr(arr, len); // 有序序列

}