#include <iostream>
#include <iomanip>
#include <cmath>

#define NaN (int)sqrt(-1.0)

using namespace std;

void printArr(int *arr, int len) {
    for (int i = 0; i < len; ++i) {
        if (arr[i] == NaN) cout << setw(5) << "NaN";
        else cout << setw(5) << arr[i];
    }
    cout << endl;
}

int getGreatest2nLessThan(int len) {
    int k = 1;
    while (k < len) k = k << 1; // 注意一定要加k=
    return k >> 1;
}

// 任意双调排序归并
void bitonicMergeAnyN(int *arr, int len, bool asd = true) {
    if (len > 1) {
        int m = getGreatest2nLessThan(len);
        for (int i = 0; i < len - m; ++i) {

            // 解决NaN问题
            int low = i;
            while (arr[low] == NaN && low < len - m) low++;
            int high = i + m;
            while (arr[high] == NaN && high < len) high++;

            if (arr[low] > arr[high] == asd)
                swap(arr[low], arr[high]); // 根据asd判断是否交换
        }
        bitonicMergeAnyN(arr, m, asd); // 一般情况下，m > len-m
        bitonicMergeAnyN(arr + m, len - m, asd);
    }
}

// 双调排序
void bitonicSort(int *arr, int len, bool asd) { // asd 升序
    if (len > 1) {
        int m = len / 2;
        bitonicSort(arr, m, !asd); // 前半降序
        bitonicSort(arr + m, len - m, asd); // 后半升序
        bitonicMergeAnyN(arr, len, asd);
    }
}


int main() {
    int len = 21;       // 数列长度
    int nan_num = 5;    // NaN个数
    auto *arr = new int[len]; // 自动识别类型
    bool asd = true;

    srandom((unsigned int) time(nullptr));

    // 随机产生 nan_num 个位置放置 NaN
    for (int i = 0; i < nan_num; ++i) {
        int pos = (int) random() % len;
        arr[pos] = NaN;
    }

    // 剩下位置赋随机值
    for (int i = 0; i < len; ++i) {
        if (arr[i] != NaN) arr[i] = (int) random() % 100; // 随机生成100内的正整数
    }

    cout << "无序序列: ";
    printArr(arr, len);

    bitonicSort(arr, len, asd);

    cout << "有序序列: ";
    printArr(arr, len); // 有序序列

}
